#!/usr/bin/env python

"""
Copyright (c) 2007-2008 Facebook

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

See accompanying file LICENSE or visit the Scribe site at:
http://developers.facebook.com/scribe/
"""


import argparse
import logging
import sys
import time

from thrift.transport import TTransport
from thrift.transport import TSocket, TSSLSocket
from thrift.transport.TTransport import TTransportException
from thrift.protocol import TBinaryProtocol
from scribe import scribe


quiet = False


class Error(Exception): pass
class Done(Exception): pass


def scribe_fix_legacy():
    global scribe
    old_log_entry = scribe.LogEntry
    def new_log_entry(**kwargs):
        return old_log_entry(kwargs)
    scribe.LogEntry = new_log_entry

def send(fd, category, host='127.0.0.1', port=1463, reconnect_timeout=1, validate=True, ca_certs=None, keyfile=None, certfile=None):
    line = None
    timeout = reconnect_timeout

    while True:
        result = scribe.ResultCode.TRY_LATER

        try:
            logging.info('Connecting to %s:%s' % (host, port))

            if (ca_certs is not None or keyfile is not None or certfile is not None):
                socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
            else:
                socket = TSocket.TSocket(host=host, port=port)

            transport = TTransport.TFramedTransport(socket)
            protocol = TBinaryProtocol.TBinaryProtocol(trans=transport, strictRead=False, strictWrite=False)
            client = scribe.Client(iprot=protocol, oprot=protocol)

            try:
                transport.open()

                while True:
                    if line is None:
                        line = fd.readline()

                        if not line:
                            raise Done()

                    try:
                        log_entry = scribe.LogEntry(category=category, message=line.strip())
                    except TypeError:
                        scribe_fix_legacy()
                        log_entry = scribe.LogEntry(category=category, message=line.strip())
                    result = client.Log(messages=[log_entry])

                    if result == scribe.ResultCode.OK:
                        line = None
            finally:
                try:
                    transport.close()
                except:
                    pass
        except TTransportException, error:
            logging.warn('Caught scribe exception (%s): %s' % (type(error), error))

        logging.info('Sleeping for %s' % timeout)
        time.sleep(timeout)
        if timeout < 30: timeout *= 2


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Scribe cat')
    parser.add_argument('category', metavar='CATEGORY', help='scribe category')
    parser.add_argument('file', metavar='FILE', nargs='?', default=None)
    parser.add_argument('--host', default='127.0.0.1', help='destination Scribe host server')
    parser.add_argument('--port', default=1463, type=int, help='destination Scribe port')
    parser.add_argument('-q', '--quiet', action='store_true')
    parser.add_argument('-v', '--validate', action='store_true', default=False)
    parser.add_argument('--keyfile', dest='keyfile', help='ssl key file')
    parser.add_argument('--certfile', dest='certfile', help='ssl cert file')
    parser.add_argument('--cacerts', dest='cacerts', help='ssl cacerts')

    args = parser.parse_args()
    fd = sys.stdin

    if args.quiet:
        logging.basicConfig(level=logging.CRITICAL)
    else:
        logging.basicConfig(level=logging.INFO)

    try:
        if args.file:
            fd = open(args.file)
        try:
            send(
                fd,
                args.category,
                host=args.host,
                port=args.port,
                validate=args.validate,
                ca_certs=args.cacerts,
                keyfile=args.keyfile,
                certfile=args.certfile
            )
        except (Done, KeyboardInterrupt):
            sys.exit(0)

    finally:
        try:
            fd.close()
        except:
            pass
